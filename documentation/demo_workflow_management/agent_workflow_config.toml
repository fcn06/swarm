#################################################################
# Config for A2A Agent, that can embed a MCP agent
#################################################################

#################################################################
# General parameters
#################################################################
agent_name="Workflow_Agent"
agent_host="127.0.0.1"
agent_http_port="8180"

# Future use. Websocket is not supported
agent_ws_port="8181"

#################################################################
# Future use : It would make sense to have a discovery service
# so that planner agent can dynamically discover agents to
# connect to
#################################################################
agent_discovery_url="http://127.0.0.1:4000"

#################################################################
# Agent Evaluation Service
#################################################################
agent_evaluation_service_url="http://127.0.0.1:7000"

#################################################################
# Agent Memory Service
#################################################################
agent_memory_service_url="http://127.0.0.1:5000"


#################################################################
# Purpose and high level skills
# The agent will use the A2A protocol for his interactions
#################################################################
agent_system_prompt="""\
You are an expert workflow generation AI. Your primary goal is to create highly efficient, well-structured, and accurate JSON workflow definitions for multi-agent systems. \
\
Follow these critical instructions for workflow design:\
\
1.  **Prioritize Agent Autonomy and Efficiency:** When an agent (e.g., `Basic_Agent`, `Workflow_Agent`) has the inherent capability and tools to perform a sequence of related operations (e.g., extracting data from an input, then using that data to call an internal tool), consolidate these steps into a single `DelegationAgent` activity. Empower agents to handle internal logic and tool orchestrations where possible, minimizing the number of distinct workflow activities. This means: \
    *   If an agent can extract a piece of information from an input (like a location from customer details) and then immediately use that extracted information with another one of its accessible tools (like fetching weather for that location), prefer to define this as a single `DelegationAgent` activity. \
    *   Avoid creating separate `DelegationAgent` activities solely for data extraction if the subsequent action also involves the same agent and its tools. \
\
2.  **Strictly Use `agent_context` for Dynamic Context:** \
    *   **DO NOT** embed variable references or dynamic data (e.g., `{{activity_X.activity_output}}`) directly into the `description` field of any activity. The `description` should remain a static, high-level summary of the activity's purpose. \
    *   All dynamic contextual information, especially outputs from preceding activities that are required as inputs for a `DelegationAgent` activity, **MUST** be passed via the `agent_context` attribute within the agent node. The agent will then use this `agent_context` to perform its internal operations. \
\
3.  **Clear Dependencies:** Always ensure that `dependencies` are correctly specified to reflect the flow of information and execution order between activities. \
\
4.  **Concise Descriptions:** Keep activity `description` fields clear and brief, focusing on the overall objective of that activity. \
\
By adhering to these principles, your generated workflows will be more performant, easier to read, and leverage the full capabilities of the agents.\
"""

agent_skill_id="workflow_processing"
agent_skill_name="Defining and Processing complex workflow through specific tasks, agents and tools"
agent_skill_description="Run complex workflow"
agent_version="1.0.0"
agent_description="An agent that can define and process complex workflow through specific tasks, agents and tools"
agent_doc_url="/docs"
agent_tags=["execute workflow","general"]
agent_examples=["What is the weather like in Boston?","What is address of customer 1234","Tell me about rust"]

#################################################################
# Define her the url of openai compatible endpoint 
# as well as the model to use
#################################################################
# These set of parameters declares the LLM that the agent will connect to
#agent_model_id="gemini-2.0-flash"
#agent_llm_url="https://generativelanguage.googleapis.com/v1beta/openai/chat/completions"
#agent_model_id="qwen/qwen3-32b"
agent_model_id="openai/gpt-oss-20b"
#agent_model_id="deepseek-r1-distill-llama-70b"
#agent_model_id="meta-llama/llama-4-scout-17b-16e-instruct"
agent_llm_url="https://api.groq.com/openai/v1/chat/completions"


#################################################################
# You can say the agent to include a MCP runtime agent
# you just define the configuration file to use
#################################################################
agent_mcp_config_path="documentation/demo_workflow_management/mcp_runtime_config.toml"
