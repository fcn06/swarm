#################################################################
# Config for an A2A orchestrator agent.
# This agent defines a plan and coordinates execution over
# multiple A2A agents.
#################################################################

#################################################################
# General parameters
#################################################################
agent_name="Orchestrator"
agent_host="127.0.0.1"
agent_http_port="9080"
# Future use. Websocket is not supported
agent_ws_port="9081"


#################################################################
# Purpose and core function
# The orchestrator uses the A2A protocol for its interactions
# and defines its role and capabilities here.
#################################################################
agent_system_prompt="You are a highly capable orchestrator and planner agent. Your primary function is to receive a user request, define a logical plan to fulfill it, and then delegate the necessary tasks to the most suitable connected agents or internal tools. Your expertise is in strategic coordination, not in performing the tasks yourself. You are aware of the skills and capabilities of the agents you manage."
agent_skill_id="orchestration_and_planning"
agent_skill_name="Task Orchestration and Delegation"
agent_skill_description="Coordinates complex requests by creating a plan and delegating tasks to other agents or internal tools."
agent_version="1.0.0"
agent_description="An orchestrator agent that coordinates the execution of tasks by delegating to specialized agents and utilizing internal tools based on a defined plan."
agent_doc_url="/docs"
agent_tags=["orchestration","planning","coordination","delegation","weather","customer_details","web_search"]
agent_examples=["Find the weather in Boston and then find customer details for a specific ID.", "Research the latest rust updates and provide a summary.", "Write a dunning letter for a customer with an overdue invoice."]


#################################################################
# Define the url of the OpenAI compatible endpoint
# as well as the model to use for planning.
#################################################################
agent_model_id="gemini-2.0-flash"
agent_llm_url="https://generativelanguage.googleapis.com/v1beta/openai/chat/completions"
#agent_model_id="qwen/qwen3-32b"
#agent_model_id="openai/gpt-oss-20b"
#agent_model_id="deepseek-r1-distill-llama-70b"
#agent_model_id="meta-llama/llama-4-scout-17b-16e-instruct"
#agent_llm_url="https://api.groq.com/openai/v1/chat/completions"

#################################################################
# Future use: It would make sense to have a discovery service
# so that the planner agent can dynamically discover agents to
# connect to.
#################################################################
agent_discovery_url="http://127.0.0.1:4000"

#################################################################
# You can say the orchestrator to include a MCP runtime agent
# you just define the configuration file to use
#################################################################
agent_mcp_config_path="configuration/agent_mcp_config.toml"

#################################################################
# Agent Evaluation Service
#################################################################
agent_evaluation_service_url="http://127.0.0.1:7000"

#################################################################
# Define the series of agents to which the orchestrator is connected.
# Once a plan is defined, it will coordinate execution
# across these A2A agents.
#################################################################
[[agent_agents_references]]
name = "generic_search"
url = "http://127.0.0.1:8080"
is_default=true

#[[agent_agents_references]]
#name = "agent_search"
#url = "http://127.0.0.1:8081"
#is_default=true

#[[agent_agents_references]]
#name = "weather_agent"
#url = "http://127.0.0.1:8082"

#[[agent_agents_references]]
#name = "customer_agent"
#url = "http://127.0.0.1:8083"

