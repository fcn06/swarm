Sample Queris, tools and Workflow dynamically Generated

********************************************************

User_Query : Prepare me a simple message to explain who is Vivaldi to my daughter  ?

Capabilities for plan creation: 
 "* tool_id : get_current_weather -- description : Get the current weather in a given location -- arguments : {\"properties\":{\"location\":{\"description\":\"Location for which you desire to know weather\",\"type\":\"string\"},\"unit\":{\"description\":\"Temperature unit to use. You can specify Degree Celsius or Degree Farenheit\",\"nullable\":true,\"type\":\"string\"}},\"type\":\"object\"}\n* tool_id : scrape_url -- description : Scrapes a given URL using Jina AI's web scraping service. -- arguments : {\"properties\":{\"url_to_scrape\":{\"description\":\"The URL to scrape\",\"type\":\"string\"}},\"type\":\"object\"}\n* tool_id : search -- description : Search for an entity on wikipedia. -- arguments : {\"properties\":{\"search_query\":{\"description\":\"An entity ( a person, a country, an animal) to search for\",\"type\":\"string\"}},\"type\":\"object\"}\n* tool_id : get_customer_details -- description : Give customer details -- arguments : {\"properties\":{\"customer_id\":{\"description\":\"Give customer details from a given customer_id\",\"type\":\"string\"}},\"type\":\"object\"}\n* task_id :  greeting -- description : Say hello to somebody\n* agent_id : Basic_Agent -- description :Retrieve Weather in a Location, Get customer details and other General Requests -- \n"
WorkFlow Generated: 
{"activities":[{"activity_type":"direct_tool_use","dependencies":[],"description":"Search Wikipedia for Vivaldi.","expected_outcome":"Raw search result for Vivaldi.","id":"activity_1","tools":[{"tool_parameters":{"search_query":"Vivaldi"},"tool_to_use":"search"}],"type":"DirectToolUse"},{"activity_type":"delegation_agent","agent":{"agent_context":{"search_result":"{{activity_1.activity_output}}"},"assigned_agent_id_preference":"Basic_Agent","skill_to_use":null},"dependencies":[{"source":"activity_1"}],"description":"Extract the summary of Vivaldi from the search result. Output a JSON object with a single key 'summary' containing the summary text. Return only the JSON object.","expected_outcome":"JSON object with key 'summary'.","id":"activity_2","type":"DelegationAgent"},{"activity_type":"delegation_agent","agent":{"agent_context":{"summary":"{{activity_2.activity_output}}"},"assigned_agent_id_preference":"Basic_Agent","skill_to_use":null},"dependencies":[{"source":"activity_2"}],"description":"Create a simple message explaining who Vivaldi is to a daughter using the summary. Output a JSON object with a single key 'message' containing the final message. Return only the JSON object.","expected_outcome":"JSON object with key 'message'.","id":"activity_3","type":"DelegationAgent"}],"plan_name":"Explain Vivaldi to Daughter"}

********************************************************

User_Query : How many olympic medals did Carl Lewis win ?

Capabilities for plan creation: 
"* tool_id : get_current_weather -- description : Get the current weather in a given location -- arguments : {\"properties\":{\"location\":{\"description\":\"Location for which you desire to know weather\",\"type\":\"string\"},\"unit\":{\"description\":\"Temperature unit to use. You can specify Degree Celsius or Degree Farenheit\",\"nullable\":true,\"type\":\"string\"}},\"type\":\"object\"}\n* tool_id : scrape_url -- description : Scrapes a given URL using Jina AI's web scraping service. -- arguments : {\"properties\":{\"url_to_scrape\":{\"description\":\"The URL to scrape\",\"type\":\"string\"}},\"type\":\"object\"}\n* tool_id : search -- description : Search for an entity on wikipedia. -- arguments : {\"properties\":{\"search_query\":{\"description\":\"An entity ( a person, a country, an animal) to search for\",\"type\":\"string\"}},\"type\":\"object\"}\n* tool_id : get_customer_details -- description : Give customer details -- arguments : {\"properties\":{\"customer_id\":{\"description\":\"Give customer details from a given customer_id\",\"type\":\"string\"}},\"type\":\"object\"}\n* task_id :  greeting -- description : Say hello to somebody\n* agent_id : Basic_Agent -- description :Retrieve Weather in a Location, Get customer details and other General Requests -- \n"
WorkFlow Generated: 
{"activities":[{"activity_type":"direct_tool_use","dependencies":[],"description":"Search Wikipedia for Carl Lewis","expected_outcome":"Raw Wikipedia data for Carl Lewis","id":"activity_1","tools":[{"tool_parameters":{"search_query":"Carl Lewis"},"tool_to_use":"search"}],"type":"DirectToolUse"},{"activity_type":"delegation_agent","agent":{"agent_context":{"search_result":"{{activity_1.activity_output}}"},"assigned_agent_id_preference":"Basic_Agent","skill_to_use":null},"dependencies":[{"source":"activity_1"}],"description":"Extract Olympic medal count from Wikipedia data","expected_outcome":"JSON object with medal_count","id":"activity_2","type":"DelegationAgent"},{"activity_type":"delegation_agent","agent":{"agent_context":{"medal_info":"{{activity_2.activity_output}}"},"assigned_agent_id_preference":"Basic_Agent","skill_to_use":null},"dependencies":[{"source":"activity_2"}],"description":"Format answer with medal count","expected_outcome":"JSON object with answer string","id":"activity_3","type":"DelegationAgent"}],"plan_name":"Retrieve Carl Lewis Olympic medal count"}

********************************************************

User_Query : Prepare a small message to describe who is Carl Lewis.

Capabilities for plan creation: 
 "* tool_id : get_current_weather -- description : Get the current weather in a given location -- arguments : {\"properties\":{\"location\":{\"description\":\"Location for which you desire to know weather\",\"type\":\"string\"},\"unit\":{\"description\":\"Temperature unit to use. You can specify Degree Celsius or Degree Farenheit\",\"nullable\":true,\"type\":\"string\"}},\"type\":\"object\"}\n* tool_id : scrape_url -- description : Scrapes a given URL using Jina AI's web scraping service. -- arguments : {\"properties\":{\"url_to_scrape\":{\"description\":\"The URL to scrape\",\"type\":\"string\"}},\"type\":\"object\"}\n* tool_id : search -- description : Search for an entity on wikipedia. -- arguments : {\"properties\":{\"search_query\":{\"description\":\"An entity ( a person, a country, an animal) to search for\",\"type\":\"string\"}},\"type\":\"object\"}\n* tool_id : get_customer_details -- description : Give customer details -- arguments : {\"properties\":{\"customer_id\":{\"description\":\"Give customer details from a given customer_id\",\"type\":\"string\"}},\"type\":\"object\"}\n* task_id :  greeting -- description : Say hello to somebody\n* agent_id : Basic_Agent -- description :Retrieve Weather in a Location, Get customer details and other General Requests -- \n"
WorkFlow Generated: 
{"activities":[{"activity_type":"direct_tool_use","dependencies":[],"description":"Search Wikipedia for Carl Lewis","expected_outcome":"Search results containing summary and title of Carl Lewis","id":"activity_1","tools":[{"tool_parameters":{"search_query":"Carl Lewis"},"tool_to_use":"search"}],"type":"DirectToolUse"},{"activity_type":"delegation_agent","agent":{"agent_context":{"activity_1.activity_output":"{{activity_1.activity_output}}"},"assigned_agent_id_preference":"Basic_Agent","skill_to_use":null},"dependencies":[{"source":"activity_1"}],"description":"Extract the 'summary' field from the search output and return it as a JSON object with a single key 'summary'","expected_outcome":"JSON object containing the extracted summary","id":"activity_2","type":"DelegationAgent"},{"activity_type":"delegation_agent","agent":{"agent_context":{"activity_2.activity_output":"{{activity_2.activity_output}}"},"assigned_agent_id_preference":"Basic_Agent","skill_to_use":null},"dependencies":[{"source":"activity_2"}],"description":"Using the extracted summary, generate a concise message describing who Carl Lewis is","expected_outcome":"A short message describing Carl Lewis","id":"activity_3","type":"DelegationAgent"}],"plan_name":"Carl Lewis Description Message"}

********************************************************